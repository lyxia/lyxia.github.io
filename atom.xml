<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[小乖乖的博客]]></title>
  <link href="http://lyxia.github.io/atom.xml" rel="self"/>
  <link href="http://lyxia.github.io/"/>
  <updated>2015-06-17T22:01:10+08:00</updated>
  <id>http://lyxia.github.io/</id>
  <author>
    <name><![CDATA[Lyxia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Runtime实例分析]]></title>
    <link href="http://lyxia.github.io/blog/2015/06/17/runtimeshi-li-fen-xi/"/>
    <updated>2015-06-17T21:13:08+08:00</updated>
    <id>http://lyxia.github.io/blog/2015/06/17/runtimeshi-li-fen-xi</id>
    <content type="html"><![CDATA[<h2>使用NSInvocation在Runtime时调用传入多个参数的方法</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+ (id)performSelectorWithTarget:(id)target selector:(SEL)selector withParams:(NSArray *)params
</span><span class='line'>{
</span><span class='line'>    NSMethodSignature *signature = [target methodSignatureForSelector:selector];
</span><span class='line'>    NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:signature];
</span><span class='line'>    
</span><span class='line'>    [invocation setTarget:target];
</span><span class='line'>    [invocation setSelector:selector];
</span><span class='line'>    
</span><span class='line'>    //因为前两个参数是target和selector，所以index从2开始
</span><span class='line'>    NSInteger index = 2;
</span><span class='line'>    id param;
</span><span class='line'>    for (param in params) {
</span><span class='line'>        [invocation setArgument:&param atIndex:index];
</span><span class='line'>        index++;
</span><span class='line'>    }
</span><span class='line'>    //将参数保存起来，防止参数被释放dealloc
</span><span class='line'>    [invocation retainArguments];
</span><span class='line'>    //消息调用
</span><span class='line'>    [invocation invoke];
</span><span class='line'>    
</span><span class='line'>    id returnValue;
</span><span class='line'>    //获取返回值类型
</span><span class='line'>    const char* returnType = signature.methodReturnType;
</span><span class='line'>    if (!strcmp(returnType, @encode(void))) {//没有返回值
</span><span class='line'>        returnValue = nil;
</span><span class='line'>    } else if(!strcmp(returnType, @encode(id))) {//为id类型
</span><span class='line'>        [invocation getReturnValue:&returnValue];
</span><span class='line'>    } else {
</span><span class='line'>        NSInteger returnLength = signature.methodReturnLength;
</span><span class='line'>        void *buffer = (void *)malloc(returnLength);
</span><span class='line'>        [invocation getReturnValue:buffer];
</span><span class='line'>        if (!strcmp(returnType, @encode(BOOL))) {
</span><span class='line'>            returnValue = [NSNumber numberWithBool:*((BOOL *)buffer)];
</span><span class='line'>        } else if(!strcmp(returnType, @encode(NSInteger))){
</span><span class='line'>            returnValue = [NSNumber numberWithInteger:*((NSInteger *)buffer)];
</span><span class='line'>        } else {
</span><span class='line'>            returnValue = [NSValue valueWithBytes:buffer objCType:returnType];
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    return returnValue;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Method Swizzling</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+ (void)load
</span><span class='line'>{
</span><span class='line'>    static dispatch_once_t onceToken;
</span><span class='line'>    dispatch_once(&onceToken, ^{
</span><span class='line'>        Class class = [self class];
</span><span class='line'>        
</span><span class='line'>        SEL originalSelector = @selector(viewWillAppear:);
</span><span class='line'>        SEL swizzledSelector = @selector(em_viewWillAppear:);
</span><span class='line'>        
</span><span class='line'>        Method originalMethod = class_getInstanceMethod(class, originalSelector);
</span><span class='line'>        Method swizzledMethod = class_getInstanceMethod(class, swizzledSelector);
</span><span class='line'>        
</span><span class='line'>        BOOL didAddMethod = class_addMethod(class, originalSelector, method_getImplementation(swizzledMethod), method_getTypeEncoding(swizzledMethod));
</span><span class='line'>        if (didAddMethod) {
</span><span class='line'>            class_replaceMethod(class, swizzledSelector, method_getImplementation(originalMethod), method_getTypeEncoding(originalMethod));
</span><span class='line'>        } else {
</span><span class='line'>            method_exchangeImplementations(originalMethod, swizzledMethod);
</span><span class='line'>        }
</span><span class='line'>    });
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)viewWillAppear:(BOOL)animated
</span><span class='line'>{
</span><span class='line'>    [super viewWillAppear:animated];
</span><span class='line'>    
</span><span class='line'>    NSLog(@"viewWillAppear");
</span><span class='line'>    
</span><span class='line'>    [self respondsToSelector:@selector(viewWillAppear:)];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)em_viewWillAppear:(BOOL)animated
</span><span class='line'>{
</span><span class='line'>    [self em_viewWillAppear:animated];
</span><span class='line'>    
</span><span class='line'>    NSLog(@"em_viewWillAppear");
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>注意点：</p>

<p>1 、 当没有重写父类的viewWillAppear时，@selector(viewWillAppear:)和class_getInstanceMethod返回的是父类的方法实现，所以调用class_addMethod会返回true（相当于重写父类的viewWillAppear:）</p>

<p>2 、 method_exchageImplementations(originalMethod, swizzledMethod)相当于：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>IMP originalImp = method_getImplementation:(originalMethod);
</span><span class='line'>IMP swizzledImp = method_getImplementation:(swizzledMethod);
</span><span class='line'>method_setImplementation(originalMethod, swizzledImp);
</span><span class='line'>method_setImplementation(swizzledMethod, originalImp);</span></code></pre></td></tr></table></div></figure>


<p>3、 em_viewWillAppear:(Bool)animated中之所以写[self em_viewWillAppear:animated]不会死循环是因为交换方法实现后，真正的方法实现如下所示：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (voic)viewWillAppear:(Bool)animated
</span><span class='line'>{
</span><span class='line'>  [self em_viewWillAppear:animated];
</span><span class='line'>  
</span><span class='line'>  NSLog(@"em_viewWillAppear");
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)em_viewWillAppear:animated
</span><span class='line'>{
</span><span class='line'>  [super viewWillAppear:animated];
</span><span class='line'>  
</span><span class='line'>  NSLog(@"viewWillAppear");
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objc Runtime]]></title>
    <link href="http://lyxia.github.io/blog/2015/06/17/objc-runtime/"/>
    <updated>2015-06-17T15:26:05+08:00</updated>
    <id>http://lyxia.github.io/blog/2015/06/17/objc-runtime</id>
    <content type="html"><![CDATA[<p><a href="http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/">runtime初识链接</a></p>

<p><a href="http://www.cnblogs.com/pengyingh/articles/2359199.html">NSInvocation的使用</a></p>

<p><a href="http://blog.csdn.net/onlyou930/article/details/7548476">NSProxy的使用</a></p>

<h2>NSObject.h</h2>

<p>头文件路径：usr/include/objc/NSObject.h</p>

<p><strong>ios应用启动的时候，就会加载所有的类，就会调用这个方法。</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+(void)load</span></code></pre></td></tr></table></div></figure>


<p><strong>类加载的延时加载方法。类加载后并不执行该方法。只有当实例化该类的实例的时候，才会在第一个实例加载前执行该方法。</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+(void)initialize</span></code></pre></td></tr></table></div></figure>


<p><strong>与消息转发有关的三个方法（动态方法解析）：</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import "ViewController.h"
</span><span class='line'>#import &lt;objc/runtime.h&gt;
</span><span class='line'>
</span><span class='line'>void dynamicMethodIMP(id self, SEL _cmd)
</span><span class='line'>{
</span><span class='line'>    NSLog(@"dynamicMethodIMP");
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>@interface alternate : NSObject
</span><span class='line'>
</span><span class='line'>@end
</span><span class='line'>
</span><span class='line'>@implementation alternate
</span><span class='line'>
</span><span class='line'>- (void)forwardingTargetToAlertnate
</span><span class='line'>{
</span><span class='line'>    NSLog(@"alternateObject forwardingTargetToAlertnate");
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)forwardInvocationHandler
</span><span class='line'>{
</span><span class='line'>    NSLog(@"alternateObject forwardInvocationHandler");
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>@end
</span><span class='line'>
</span><span class='line'>@interface ViewController ()
</span><span class='line'>@property (nonatomic, strong) alternate *alternateObject;
</span><span class='line'>@end
</span><span class='line'>
</span><span class='line'>@implementation HelloRuntime
</span><span class='line'>
</span><span class='line'>- (instancetype)init
</span><span class='line'>{
</span><span class='line'>    if(self = [super init])
</span><span class='line'>    {
</span><span class='line'>      [self performSelector:sel_registerName("resolveThisMethodDynamically") withObject:nil];
</span><span class='line'>      [self performSelector:sel_registerName("forwardingTargetToAlertnate") withObject:nil];
</span><span class='line'>      [self performSelector:sel_registerName("forwardInvocationHandler") withObject:nil];
</span><span class='line'>    }
</span><span class='line'>    return self;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>/**
</span><span class='line'>消息发送步骤：
</span><span class='line'>1、检测这个 selector 是不是要忽略的。比如 Mac OS X 开发，有了垃圾回收就不理会 retain, release 这些函数了。
</span><span class='line'>2、检测这个 target 是不是 nil 对象。ObjC 的特性是允许对一个 nil 对象执行任何一个方法不会 Crash，因为会被忽略掉。
</span><span class='line'>3、如果上面两个都过了，那就开始查找这个类的 IMP，先从 cache 里面找，完了找得到就跳到对应的函数去执行。
</span><span class='line'>4、如果 cache 找不到就找一下方法分发表。
</span><span class='line'>5、如果分发表找不到就到超类的分发表去找，一直找，直到找到NSObject类为止。
</span><span class='line'>6、如果还找不到就要开始进入动态方法解析了，后面会提到。
</span><span class='line'> */
</span><span class='line'>
</span><span class='line'>//动态方法解析
</span><span class='line'>//动态方法解析器将会被首先给予一个提供该方法选择器对应的IMP的机会。如果你想让该方法选择器被传送到转发机制，那么就让resolveInstanceMethod:返回NO。
</span><span class='line'>#pragma mark - 动态方法解析
</span><span class='line'>+ (BOOL)resolveInstanceMethod:(SEL)sel
</span><span class='line'>{
</span><span class='line'>    if (sel == sel_registerName("resolveThisMethodDynamically")) {
</span><span class='line'>        class_addMethod([self class], sel, (IMP)dynamicMethodIMP, "v@:");
</span><span class='line'>        return YES;
</span><span class='line'>    }
</span><span class='line'>    return NO;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>//重定向
</span><span class='line'>//消息转发机制执行前，Runtime 系统会再给我们一次偷梁换柱的机会，即通过重载- (id)forwardingTargetForSelector:(SEL)aSelector方法替换消息的接受者为其他对象
</span><span class='line'>// 如果此方法返回nil或self,则会进入消息转发机制(forwardInvocation:),否则将向返回的对象重新发送消息。
</span><span class='line'>- (id)forwardingTargetForSelector:(SEL)aSelector
</span><span class='line'>{
</span><span class='line'>    if (aSelector == sel_registerName("forwardingTargetToAlertnate")) {
</span><span class='line'>        return self.alternateObject;
</span><span class='line'>    }
</span><span class='line'>    return [super forwardingTargetForSelector:aSelector];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>//进入转发机制
</span><span class='line'>//这里需要注意的是参数anInvocation是从哪的来的呢？其实在forwardInvocation:消息发送前，Runtime系统会向对象发送methodSignatureForSelector:消息，并取到返回的方法签名用于生成NSInvocation对象。所以我们在重写forwardInvocation:的同时也要重写methodSignatureForSelector:方法，否则会抛异常。
</span><span class='line'>- (void)forwardInvocation:(NSInvocation *)anInvocation
</span><span class='line'>{
</span><span class='line'>    if ([self.alternateObject respondsToSelector:anInvocation.selector]) {
</span><span class='line'>        [anInvocation invokeWithTarget:self.alternateObject];
</span><span class='line'>    } else {
</span><span class='line'>        [super forwardInvocation:anInvocation];
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (NSMethodSignature *)methodSignatureForSelector:(SEL)sel
</span><span class='line'>{
</span><span class='line'>    NSMethodSignature *signature = [super methodSignatureForSelector:sel];
</span><span class='line'>    if (!signature) {
</span><span class='line'>        signature = [self.alternateObject methodSignatureForSelector:sel];
</span><span class='line'>    }
</span><span class='line'>    return signature;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<p>动态方法解析分析图：</p>

<p><img src="http://7ni3rk.com1.z0.glb.clouddn.com/QQ20141113-1@2x.png?imageView2/2/w/800/q/75|watermark/2/text/eXVsaW5ndGlhbnhpYQ==/font/Y29taWMgc2FucyBtcw==/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt="image" /></p>

<p><strong>获得方法实现地址：</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (IMP)methodForSelector:(SEL)aSelector;
</span><span class='line'>+ (IMP)instanceMethodForSelector:(SEL)aSelector;</span></code></pre></td></tr></table></div></figure>


<p><strong>判读是否实现特定协议：</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (BOOL)conformsToProtocol:(Protocol *)aProtocol;
</span><span class='line'>+ (BOOL)conformsToProtocol:(Protocol *)protocol;</span></code></pre></td></tr></table></div></figure>


<p><strong>判读是否能响应特定选择器：</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (BOOL)respondsToSelector:(SEL)aSelector;
</span><span class='line'>+ (BOOL)instancesRespondToSelector:(SEL)aSelector;</span></code></pre></td></tr></table></div></figure>


<p><strong>类关系判断：</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (BOOL)isKindOfClass:(Class)aClass;
</span><span class='line'>- (BOOL)isMemberOfClass:(Class)aClass;
</span><span class='line'>+ (BOOL)isSubclassOfClass:(Class)aClass;
</span><span class='line'>+ (Class)superclass;
</span><span class='line'>+ (Class)class;</span></code></pre></td></tr></table></div></figure>


<h2>runtime.h</h2>

<p>头文件路径：usr/include/objc/runtime.h</p>

<p><strong>Objective-C Associated Objects</strong></p>

<p>在 OS X 10.6 之后，Runtime系统让Objc支持向对象动态添加变量。涉及到的函数有以下三个：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void objc_setAssociatedObject ( id object, const void *key, id value, objc_AssociationPolicy policy );
</span><span class='line'>id objc_getAssociatedObject ( id object, const void *key );
</span><span class='line'>void objc_removeAssociatedObjects ( id object );</span></code></pre></td></tr></table></div></figure>


<p>这些方法以键值对的形式动态地向对象添加、获取或删除关联值。其中关联政策是一组枚举常量：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>enum {
</span><span class='line'>   OBJC_ASSOCIATION_ASSIGN  = 0,
</span><span class='line'>   OBJC_ASSOCIATION_RETAIN_NONATOMIC  = 1,
</span><span class='line'>   OBJC_ASSOCIATION_COPY_NONATOMIC  = 3,
</span><span class='line'>   OBJC_ASSOCIATION_RETAIN  = 01401,
</span><span class='line'>   OBJC_ASSOCIATION_COPY  = 01403
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p>这些常量对应着引用关联值的政策，也就是 Objc 内存管理的引用计数机制。</p>

<p>注意：Associated Objects与对象属性不是一回事，对象并不会添加变量名为key值为value的属性。</p>

<p><strong>Working with Selectors</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const char *sel_getName(SEL sel)；
</span><span class='line'>SEL sel_registerName(const char *str)</span></code></pre></td></tr></table></div></figure>


<p><strong>Working with Libraries</strong></p>

<p><strong>Working with Protocols</strong></p>

<p><strong>Working with Properties</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const char *property_getName(objc_property_t property);
</span><span class='line'>const char *property_getAttributes(objc_property_t property);
</span><span class='line'>objc_property_attribute_t *property_copyAttributeList(objc_property_t property, unsigned int *outCount);
</span><span class='line'>char *property_copyAttributeValue(objc_property_t property, const char *attributeName)</span></code></pre></td></tr></table></div></figure>


<p><strong>Working with Instance Variables</strong></p>

<p><strong>Working with Methods</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SEL method_getName(Method m);
</span><span class='line'>IMP method_getImplementation(Method m);
</span><span class='line'>const char *method_getTypeEncoding(Method m);
</span><span class='line'>unsigned int method_getNumberOfArguments(Method m);
</span><span class='line'>char *method_copyReturnType(Method m);
</span><span class='line'>char *method_copyArgumentType(Method m, unsigned int index);
</span><span class='line'>void method_getReturnType(Method m, char *dst, size_t dst_len);
</span><span class='line'>void method_getArgumentType(Method m, unsigned int index, char *dst, size_t dst_len);
</span><span class='line'>IMP method_setImplementation(Method m, IMP imp);
</span><span class='line'>method_exchangeImplementations(Method m1, Method m2);</span></code></pre></td></tr></table></div></figure>


<p><strong>Working with Classes</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const char *class_getName(Class cls);
</span><span class='line'>Class class_getSuperclass(Class cls);
</span><span class='line'>Method class_getInstanceMethod(Class cls, SEL name);
</span><span class='line'>Method class_getClassMethod(Class cls, SEL name);
</span><span class='line'>IMP class_getMethodImplementation(Class cls, SEL name);
</span><span class='line'>IMP class_getMethodImplementation_stret(Class cls, SEL name);
</span><span class='line'>Method *class_copyMethodList(Class cls, unsigned int *outCount);
</span><span class='line'>Protocol * __unsafe_unretained *class_copyProtocolList(Class cls, unsigned int *outCount);
</span><span class='line'>objc_property_t *class_copyPropertyList(Class cls, unsigned int *outCount);
</span><span class='line'>objc_property_t class_getProperty(Class cls, const char *name);
</span><span class='line'>BOOL class_addMethod(Class cls, SEL name, IMP imp, const char *types);
</span><span class='line'>IMP class_replaceMethod(Class cls, SEL name, IMP imp, const char *types);
</span></code></pre></td></tr></table></div></figure>


<p><strong>Working with Instances</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Class objc_getClass(const char *name);
</span><span class='line'>const char *object_getClassName(id obj);
</span><span class='line'>BOOL object_isClass(id obj);
</span><span class='line'>Class object_getClass(id obj);</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用CocoaPods做iOS程序依赖管理]]></title>
    <link href="http://lyxia.github.io/blog/2015/06/15/yong-cocoapodszuo-ioscheng-xu-yi-lai-guan-li/"/>
    <updated>2015-06-15T21:20:56+08:00</updated>
    <id>http://lyxia.github.io/blog/2015/06/15/yong-cocoapodszuo-ioscheng-xu-yi-lai-guan-li</id>
    <content type="html"><![CDATA[<p>了解cocoaPods：<a href="http://blog.devtang.com/blog/2014/05/25/use-cocoapod-to-manage-ios-lib-dependency/">唐巧的博客</a></p>

<p>创建私有仓库：<a href="http://blog.csdn.net/agdsdl/article/details/45218987">link</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS6.6 Gitlab搭建]]></title>
    <link href="http://lyxia.github.io/blog/2015/06/08/title/"/>
    <updated>2015-06-08T18:17:08+08:00</updated>
    <id>http://lyxia.github.io/blog/2015/06/08/title</id>
    <content type="html"><![CDATA[<p>准备一台全新的服务，我的是centOS</p>

<p><strong>查看centOS系统版本</strong></p>

<p><code>cat/etc/redhat-release</code></p>

<p>或者</p>

<p><code>rpm -q centos-release</code></p>

<p>我的cenos mini是：</p>

<p><code>centos-release-6-6.el6.centos.12.2.x86_64</code></p>

<p><strong>服务器ip：</strong></p>

<p><code>ifconfig</code></p>

<p>输出：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>eth0      Link encap:Ethernet  HWaddr 00:15:5D:02:20:08
</span><span class='line'>          inet addr:192.168.2.34  Bcast:192.168.2.255  Mask:255.255.255.0
</span><span class='line'>          inet6 addr: fe80::215:5dff:fe02:2008/64 Scope:Link
</span><span class='line'>          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
</span><span class='line'>          RX packets:164474 errors:0 dropped:0 overruns:0 frame:0
</span><span class='line'>          TX packets:53244 errors:0 dropped:0 overruns:0 carrier:0
</span><span class='line'>          collisions:0 txqueuelen:1000
</span><span class='line'>          RX bytes:151856771 (144.8 MiB)  TX bytes:4438161 (4.2 MiB)
</span><span class='line'>
</span><span class='line'>lo        Link encap:Local Loopback
</span><span class='line'>          inet addr:127.0.0.1  Mask:255.0.0.0
</span><span class='line'>          inet6 addr: ::1/128 Scope:Host
</span><span class='line'>          UP LOOPBACK RUNNING  MTU:16436  Metric:1
</span><span class='line'>          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
</span><span class='line'>          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
</span><span class='line'>          collisions:0 txqueuelen:0
</span><span class='line'>          RX bytes:0 (0.0 b)  TX bytes:0 (0.0 b)
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><strong>第一种安装方式：</strong></p></blockquote>

<p><a href="https://github.com/gitlabhq/gitlab-recipes/tree/master/install/centos">gitlabhd官方文档(英文的)</a></p>

<p><a href="http://www.tuicool.com/articles/A3qYRr">gitlabhd基于官方文档的翻译</a></p>

<p>安装过程过于复杂（对于我这种第一次接触服务器的小白），中间会遇到各种坑，不过都能通过baidu，google解决。要手动配置很多东西，一旦弄错了很难找到哪个环节错了，不过对于小白是一个快速熟悉各种命令，学习linux好途径（我整整搭了5天，中途N次想放弃）</p>

<p>排除错误时经常使用的log、命令、配置文件：</p>

<p><strong>配置文件</strong></p>

<p>gitlab</p>

<ul>
<li>home/git/gitlab-shell config.yml</li>
<li>home/git/gitlab/config/gitlab.yml</li>
<li>home/git/gitlab/config/unicorn.rb</li>
</ul>


<p>nginx</p>

<ul>
<li>etc/nginx/nginx.conf</li>
<li>etc/nginx/sites-available/gitlab</li>
</ul>


<p><strong>命令：</strong></p>

<ul>
<li>检测gitlab-sheel：<code>gitlab-shell/bin/check</code></li>
<li>检测gitlab的配置情况：在gitlab目录下 <code>bundle exec rake gitlab:check RAILS_ENV=production</code></li>
<li>查看到系统、Ruby、GitLab和GitLab Shell的版本和其他信息：在gitlab目录下 <code>bundle exec rake gitlab:env:info RAILS_ENV=production</code></li>
</ul>


<p><strong>log</strong></p>

<p>nginx</p>

<ul>
<li>var/log/nginx/gitlab-error.log</li>
<li>var/log/nginx/gitlab-access.log</li>
</ul>


<p>gitlab-shell</p>

<ul>
<li>home/git/gitlab-shell/gitlab-shell.log</li>
<li>home/git/gitlab/log/ 目录下各种log</li>
</ul>


<blockquote><p><strong>第二种安装方式：</strong></p></blockquote>

<p><a href="https://about.gitlab.com/downloads/">gitlabCE安装</a></p>

<p>选择你的操作系统，按步骤来就行了
如果顺利安装，在浏览器中输入：<code>http://服务器ip</code>即可访问gitlab</p>

<p><strong>遇到的问题：</strong></p>

<ul>
<li>要安装openssh-clients，不然添加ssh key会出现500错误 <code>yum -y install openssh-clients </code></li>
<li>会经常提示找不到源，可以去网上找些国内的源，也可以直接翻墙，推荐的翻墙工具：<strong>shadowsocks</strong></li>
<li>将nginx gitlab.conf中的url改为自己的域名，不然可能无法用浏览器访问</li>
<li>改完nginx的配置要重启nginx，并且记得清缓存（忘记清缓存会很打击的信心的%>_&lt;%）</li>
</ul>


<blockquote><p><strong>经常用到的命令：</strong></p></blockquote>

<ul>
<li>在全局环境下查找文件：<code>find / -name "文件名"</code></li>
<li>以管理员权限运行：<code>sudo 要执行的命令</code></li>
<li>切换用户：<code>su - 用户名</code></li>
<li>配置防火墙：<code>vim /etc/sysconfig/iptables</code></li>
<li>重启防火墙：<code>service iptables restart</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Write Octopress Blog]]></title>
    <link href="http://lyxia.github.io/blog/2015/06/02/how-to-write-octopress-blog/"/>
    <updated>2015-06-02T00:53:19+08:00</updated>
    <id>http://lyxia.github.io/blog/2015/06/02/how-to-write-octopress-blog</id>
    <content type="html"><![CDATA[<p>开始写博客
Octopress为我们提供了一些task来创建博文和页面。博文必须存储在source/_posts目录下，并且需要按照Jekyll的命名规范对文章进行命名：YYYY-MM-DD-post-title.markdown。文章的名字会被当做url的一部分，而其中的日期用于对博文的区分和排序。</p>

<p>通过Octopress提供的task可以正确的按照命名规范创建一个博文，并且在博文中会附带常用的一些yaml元数据。只需要在终端输入如下命令：
C代码  收藏代码
rake new_post[&ldquo;title&rdquo;]</p>

<p>其中title为博文的文件名，创建出来的文件默认是markdown格式。上面的命令会创建出这样一个文件：source/_posts/2013-08-03-title.markdown。打开这个文件，可以看到里面有如下一些内容了(告诉Jekyll博客引擎如何处理博文和页面)：</p>

<h2>C代码  收藏代码</h2>

<p>layout: post<br/>
title: &ldquo;title&rdquo;<br/>
date: 2013-08-03 16:36<br/>
comments: true</p>

<h2>categories:   </h2>

<p>接着我们就可以在这个文件中写我们的博文啦。完成之后，我们可以预览和部署博文。下面是创建并部署博文的一个完整过程：
C代码  收藏代码
$ rake new_post[&ldquo;New Post&rdquo;]<br/>
$ rake generate<br/>
$ git add .<br/>
$ git commit -am &ldquo;Some comment here.&rdquo; <br/>
$ git push origin source<br/>
$ rake deploy</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS多线程的三种技术]]></title>
    <link href="http://lyxia.github.io/blog/2015/06/02/i-love-coding/"/>
    <updated>2015-06-02T00:44:57+08:00</updated>
    <id>http://lyxia.github.io/blog/2015/06/02/i-love-coding</id>
    <content type="html"><![CDATA[<ul>
<li><strong>NSThread</strong>

<ul>
<li>使用NSThread对象建立一个线程非常方便</li>
<li>使用NSThread管理多个线程非常困难，不推荐使用</li>
<li>使用[NSThread currentThread]跟踪任务所在线程，适用于这三种技术</li>
</ul>
</li>
<li><strong>GCD</strong>

<ul>
<li>Grand Central Dispatch(GCD)</li>
<li>是基于C语言的底层API</li>
<li>用Block定义任务，使用起来非常灵活便捷</li>
<li>提供了更多的控制能力以及操作队列中所不能使用的底层函数</li>
</ul>
</li>
<li><strong>NSOperationQueue</strong>

<ul>
<li>是使用GCD实现的一套Objective-C的API</li>
<li>是面向对象的线程技术</li>
<li>提供了一些在GCD中不容易实现的特性，如：限制最大并发数量、操作之间的依赖关系</li>
</ul>
</li>
</ul>


<h1>iOS中多线程使用的三要素：</h1>

<table>
<thead>
<tr>
<th>-</th>
<th><strong>同步</strong>   </th>
<th>  <strong>异步</strong>  </th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>主队列</strong>   </td>
<td>   崩溃       </td>
<td>     主线程 </td>
</tr>
<tr>
<td><strong>串行队列</strong> </td>
<td> 当前线程      </td>
<td> 新开一个线程 </td>
</tr>
<tr>
<td><strong>并行队列</strong> </td>
<td> 当前线程      </td>
<td> 新开N个线程 </td>
</tr>
</tbody>
</table>


<h2>方式</h2>

<ul>
<li><p>同步(不开线程，在当前线程执行)</p>

<pre><code class="``obj-c">  //GCD
  //1
  dispatch_sync(queue, ^{//任务});

  //NSOperation
  //2
  [[NSBlockOperation blockOperationWithBlock:^{//任务}] start];
  //3
  [[[NSInvocationOperation alloc] initWithTarget:self selector:@selector(run) object:nil] start];

  //NSObject
  //4
  [self performSelector:@selector(test1) withObject:nil];
</code></pre></li>
<li><p>异步(新开线程执行)</p>

<pre><code class="``obj-c">  //GCD
  //1
  dispatch_async(queue, ${//任务});

  //NSOperation
  //2
  NSOperationQueue *queue = [[NSOperationQueue alloc] init];
  NSBlockOperation *operation1 = [NSBlockOperation blockOperationWithBlock:^{//任务}];
  NSInvocationOperation *operation2 = [[NSInvocationOperation alloc] initWithTarget:self selector:@selector(run)object:nil];
  [queue addOperation:operation1];
  [queue addOperation:operation2];
  //3
  NSBlockOperation *operation3 = [NSBlockOperation blockOperationWithBlock:^{//任务1}];
  [operation3 blockOperationWithBlock:^{//任务2}]
  [operation3 blockOperationWithBlock:^{//任务3}]
  [operation3 start];

  //NSObject
  //4
  [self performSelectorInBackground:@selector(test1) withObject:nil];

  //NSThread直接创建线程
  //5 
  //需要手动开启
  NSThread *thread = [[NSThread alloc] initWithTarget:self selector:@selector(run:) object:@"线程"];
  [thread start];
  //自动开启
  NSThread *thread1 = [[NSThread alloc] detachNewThreadSelector:@selector(run:) toTarget:self withObject:@"自动"];

  //最原始的方式创建线程
  //6
  pthread_t thread;
  pthread_create(&amp;pthread, NULL, run, NULL);
</code></pre></li>
<li><p>主线程</p>

<pre><code class="``obj-c">  //GCD
  //1
  dispatch_async(dispatch_get_main_queue(), ^{//在主线程执行的代码});

  //NSObject
  //2
  [self performSelectorOnMainThread:@selector(test1) withObject:nil waitUntilDone:NO];
</code></pre></li>
</ul>


<h2>队列</h2>

<ul>
<li><p>主队列（同步方式运行会崩溃，异步运行在主线程）</p>

<pre><code class="``obj-c    ">  dispatch_get_main_queue()
</code></pre></li>
<li><p>串行队列（以异步方式运行时开一个队列FIFO）</p>

<pre><code class="``obj-c    ">  //GCD
  //1
  dispatch_create_queue(name,attr) //队列名称，队列属性（NULL）

  //NSOperatorQueue
  //2
  NSOperatorQueue *queue = [[NSOperatorQueue alloc] init];
  [queue setMaxConcurrentOperationCount:1];
</code></pre></li>
<li><p>并行队列（以异步方式运行时开多个线程）</p>

<pre><code class="``obj-c">  //GCD
  //1
  dispatch_get_global_queue()

  //NSOperatorQueue
  //2
  NSOperatorQueue *queue = [[NSOperatorQueue alloc] init];
  NSBlockOperation *operation1 = [NSBlockOperation blockOperationWithBlock:^{//任务}];
  NSInvocationOperation *operation2 = [[NSInvocationOperation alloc] initWithTarget:self selector:@selector(run)object:nil];
  [queue addOperation:operation1];
  [queue addOperation:operation2];

  //NSBlockOperation 任务 &gt; 1
  //3
  NSBlockOperation *operation3 = [NSBlockOperation blockOperationWithBlock:^{//任务}];
  [operation3 blockOperationWithBlock:^{//任务2}];
  [operation3 blockOperationWithBlock:^{//任务3}];
  [operation3 start];
</code></pre></li>
</ul>


<h2>任务</h2>

<pre><code>//将任务封装到NSOperatorOperation中

//在创建线程时写入
</code></pre>

<h1>iOS多线程特殊用法</h1>

<ul>
<li><p><strong>线程安全</strong></p>

<pre><code class="``obj-c    ">  @synchronized(self){}
</code></pre></li>
<li><p><strong>线程休眠</strong></p>

<pre><code class="``obj-c">  //第一种
  [NSThread sleepForTimeInterval:2.0];
  //第二种 以当前时间为基准阻塞
  NSDate *date = [NSDate dateWithTimeIntervalSinceNow:2.0];
  [NSThread sleepUntilDate:date];
</code></pre></li>
<li><p><strong>延迟执行</strong></p>

<pre><code class="``obj-c">  //NSObject
  //1
  [self performSelector:@selector(run) withObject:nil afterDelay:2.0];

  //GCD
  //2
  dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
  // 2秒后异步执行这里的代码...
  });
</code></pre></li>
<li><p><strong>一次性执行</strong></p>

<pre><code class="``obj-c">  static dispatch_once_t onceToken;
  dispatch_once(&amp;onceToken, ^{
      // 只执行1次的代码(这里面默认是线程安全的)
  });
</code></pre></li>
<li><p><strong>队列组</strong></p>

<pre><code class="``obj-c">  //1、创建一个组
  dispatch_group_t group = dispatch_group_create();
  //2、两张图同时下载
  dispatch_group_async(group, queue, ^{//下载第一张图});
  dispatch_group_async(group, queue, ^{//下载第二张图});
  //3、通知
  dispatch_group_notify(group, dispatch_get_main_queue(), ^{//等两张图都下载完成，回到主线程执行});
</code></pre></li>
</ul>


<h1>iOS NSOperation的设置</h1>

<ul>
<li><p><strong>设置任务优先级(说明：优先级高的任务，调用的几率会更大。)</strong></p>

<pre><code class="``obj-c    ">  - (NSOperationQueuePriority)queuePriority;
  - (void)setQueuePriority:(NSOperationQueuePriority)p;
  //优先级的取值
  //NSOperationQueuePriorityVeryLow = -8L,
  //NSOperationQueuePriorityLow = -4L,
  //NSOperationQueuePriorityNormal = 0,
  //NSOperationQueuePriorityHigh = 4,
  //NSOperationQueuePriorityVeryHigh = 8 
</code></pre></li>
<li><p><strong>设置队列状态</strong></p>

<pre><code class="``obj-c">  - (void)cancelAllOperations;
  - (void)setSuspended:(BOOL)b; // YES代表暂停队列,NO代表恢复队列
  - (BOOL)isSuspended; //当前状态
</code></pre></li>
<li><p><strong>设置队列并发数</strong></p>

<pre><code class="``obj-c">  - (NSInteger)maxConcurrentOperationCount;
  - (void)setMaxConcurrentOperationCount:(NSInteger)cnt; 
</code></pre></li>
<li><p><strong>设置任务依赖（NSOperation之间可以设置依赖来保证执行顺序，⽐如一定要让操作A执行完后,才能执行操作B,可以在不同queue的NSOperation之间创建依赖关系）</strong></p>

<pre><code class="``obj-c    ">  [operationB addDependency:operationA]; // 操作B依赖于操作A
</code></pre></li>
<li><p><strong>设置队列监听</strong></p>

<pre><code class="``obj-c">  - (void (^)(void))completionBlock;
  - (void)setCompletionBlock:(void (^)(void))block; 
</code></pre></li>
</ul>


<h1>注意的知识点</h1>

<p>主队列开启异步任务，虽然不会开启新的线程，但是他会把异步任务降低优先级，等闲着的时候，就会在主线程上执行异步任务。在主队列开启同步任务，因为主队列是串行队列，里面的线程是有顺序的，先执行完一个线程才执行下一个线程，而主队列始终就只有一个主线程，主线程是不会执行完毕的，因为他是无限循环的，除非关闭应用程序。因此在主线程开启一个同步任务，同步任务会想抢占执行的资源，而主线程任务一直在执行某些操作，不肯放手。两个的优先级都很高，最终导致死锁，阻塞线程了。</p>
]]></content>
  </entry>
  
</feed>
